{"version":3,"sources":["shared/components/UI/Card.js","shared/components/UI/Map.js","place/components/PlaceItem.js","place/components/PlaceList.js","place/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","id","image","title","description","address","creatorId","coordinates","onDelete","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","Authorization","token","ErrorModal","onClear","Modal","show","onCancel","header","contentClass","footerClass","footer","Button","onClick","inverse","danger","LoadingSpinner","asOverlay","src","alt","userId","to","PlaceList","items","length","place","key","creator","location","UserPlaces","loadedPlaces","setLoadedPlaces","uid","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.c35758d2.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from \"react\";\n\nimport \"./Map.css\";\n\nconst Map = props => {\n  const mapRef = useRef();\n\n  const { center, zoom } = props;\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom,\n    });\n\n    new window.google.maps.Marker({ position: props.center, map: map });\n  }, [center, zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    />\n  );\n};\n\nexport default Map;\n","import React, { Fragment, useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UI/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UI/Modal\";\nimport Map from \"../../shared/components/UI/Map\";\nimport ErrorModal from \"../../shared/components/UI/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UI/LoadingSpinner\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./PlaceItem.css\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst PlaceItem = ({\n  id,\n  image,\n  title,\n  description,\n  address,\n  creatorId,\n  coordinates,\n  onDelete,\n}) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => {\n    setShowMap(true);\n  };\n\n  const closeMapHandler = () => {\n    setShowMap(false);\n  };\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + `/places/${id}`,\n        \"DELETE\",\n        null,\n        { Authorization: \"Bearer \" + auth.token }\n      );\n      onDelete(id);\n    } catch (err) {}\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={coordinates} zoom={16} />\n        </div>\n      </Modal>\n\n      <Modal\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </Fragment>\n        }\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n      >\n        <p>\n          Do you want to proceed to delete this place? Please note that it can't\n          be undone thereafter.\n        </p>\n      </Modal>\n\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${image}`} alt={title} />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{title}</h2>\n            <h3>{address}</h3>\n            <p>{description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === creatorId && (\n              <Button to={`/places/${id}`}>EDIT</Button>\n            )}\n            {auth.userId === creatorId && (\n              <Button danger onClick={showDeleteWarningHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from \"react\";\n\nimport Card from \"../../shared/components/UI/Card\";\nimport PlaceItem from \"./PlaceItem\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport \"./PlaceList.css\";\n\nconst PlaceList = props => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h1>No places found. Maybe create one?</h1>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"place-list\">\n      {props.items.map(place => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport PlaceList from \"../components/PlaceList\";\nimport ErrorModal from \"../../shared/components/UI/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UI/LoadingSpinner\";\n\nconst UserPlaces = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlaces, setLoadedPlaces] = useState([]);\n  const uid = useParams().uid;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${uid}`\n        );\n\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n  }, [sendRequest, uid]);\n\n  const placeDeletedHandler = deletedPlaceId => {\n    setLoadedPlaces(prevPlaces =>\n      prevPlaces.filter(place => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDelete={placeDeletedHandler} />\n      )}\n    </Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}